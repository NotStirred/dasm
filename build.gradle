import java.nio.file.Files

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'io.freefair.lombok' version '8.4'
    id 'jacoco'
}

group 'io.github.notstirred'
archivesBaseName = "dasm"
version '2.1.0'

ext.ossrhUsername = project.findProperty("ossrhUsername") ?: "" // Enter in ~/.gradle/gradle.properties, not here.
ext.ossrhPassword = project.findProperty("ossrhPassword") ?: "" // Enter in ~/.gradle/gradle.properties, not here.

sourceSets {
    api
}

configurations {
    implementation.extendsFrom(apiImplementation)
}

compileJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
compileApiJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
compileTestJava {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

java {
    withSourcesJar()
    withJavadocJar()

    registerFeature("api") {
        usingSourceSet(sourceSets.api)
        withSourcesJar()
        withJavadocJar()
    }
}

assemble.dependsOn(tasks.named("apiJar"))
assemble.dependsOn(tasks.named("apiSourcesJar"))

jar {
    from sourceSets.api.output
}

sourcesJar {
    from sourceSets.api.allSource
}

sourceSets.main {
    it.compileClasspath += sourceSets.api.output
    it.runtimeClasspath += sourceSets.api.output
}
sourceSets.test {
    it.compileClasspath += sourceSets.api.output
    it.runtimeClasspath += sourceSets.api.output
}

repositories {
    mavenCentral()
}

dependencies {
    apiImplementation 'org.ow2.asm:asm:9.6'
    apiImplementation 'org.ow2.asm:asm-tree:9.6'
    apiImplementation 'org.ow2.asm:asm-util:9.6'
    apiImplementation 'org.ow2.asm:asm-commons:9.6'

    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.22.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.22.1'

    implementation 'org.jetbrains:annotations:23.0.0'

    testImplementation 'org.assertj:assertj-core:3.21.0'

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.0')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.9.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.9.0')

    testImplementation('com.roscopeco.jasm:jasm:0.7.0')
}

test {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}
jacoco {
    toolVersion = "0.8.11"
}

artifacts {
    archives javadocJar, sourcesJar, apiJar, apiJavadocJar, apiSourcesJar
}

publishing {
    publications {
        // Add additional publications (main and main-sources are added by the java plugin)
        dasm(MavenPublication) {
            from components.java

            pom {
                name = "DASM"
                description = 'A library for declarative annotation based bytecode transformations.'
                url = 'https://github.com/NotStirred/dasm'
                licenses {
                    license {
                        name = "MIT"
                        url = "https://opensource.org/license/mit/"
                    }
                }
                developers {
                    developer {
                        id = 'NotStirred'
                        name = 'Tom Martin'
                        email = 'tom.martin1239@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:NotStirred/dasm.git'
                    developerConnection = 'scm:git:git@github.com:NotStirred/dasm.git'
                    url = 'https://github.com/NotStirred/dasm'
                }
            }
        }
    }

    repositories {
        maven {
            url "${url = version.endsWith('SNAPSHOT') ? "https://s01.oss.sonatype.org/content/repositories/snapshots/" : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"}"
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
        }
    }

    signing {
        sign publishing.publications.dasm
    }
}

class TestTemplate extends DefaultTask {
    private String testName;
    private String packageName;

    @Option(option = "name", description = "The name of the test.")
    void setTestName(String name) {
        this.testName = name;
    }

    @Input
    String getTestName() {
        return testName;
    }

    @Option(option = "package", description = "The package the test should be in.")
    void setPackage(String name) {
        this.packageName = name;
    }

    @Input
    String getPackageName() {
        return packageName;
    }

    @TaskAction
    void instantiateTemplate() {
        Set<File> srcDirs = project.sourceSets.test.getAllSource().getSrcDirs()
        var testDir = new File(srcDirs.stream().filter {
            it.name.endsWith("java")
        }.findFirst().get(), "io/github/notstirred/dasm/test/tests/" + packageName)
        testDir.mkdirs()
        Files.writeString(new File(testDir, "Test" + testName + ".java").toPath(),
                """package io.github.notstirred.dasm.test.tests.${packageName};

import io.github.notstirred.dasm.api.annotations.Dasm;
import io.github.notstirred.dasm.api.annotations.redirect.sets.RedirectSet;
import io.github.notstirred.dasm.test.tests.BaseMethodTest;

import static io.github.notstirred.dasm.test.tests.TestData.single;

/**
 * TODO
 */
@Dasm(Test${testName}.Set.class)
public class Test${testName} extends BaseMethodTest {
    public Test${testName}() {
        super(single(${testName}Input.class, ${testName}Output.class, Test${testName}.class));
    }
    
    @RedirectSet
    interface Set {
    
    }
}
"""
        )
        Files.writeString(new File(testDir, testName + "Input.java").toPath(),
                """package io.github.notstirred.dasm.test.tests.${packageName};
            
public class ${testName}Input {
    // TODO
}
"""
        )
        Files.writeString(new File(testDir, testName + "Output.java").toPath(),
                """package io.github.notstirred.dasm.test.tests.${packageName};

public class ${testName}Output {
    // TODO
}
"""
        )
    }
}

tasks.register('testTemplate', TestTemplate)